🧠 State Machine for Switching Between Maps

Your state machine decides when to use global or local mapping.
🌍 Global Mapping State

✔️ Triggers when:

    New GPS location reached (beyond local map range).
    RealSense scans unseen terrain.
    ✔️ Updates:
    Adds sensor data to the hash table.
    Increases resolution for frequently visited areas.

🏠 Local Mapping State

✔️ Triggers when:

    Rover is actively moving within the 10m sensor range.
    A* path planning needs to navigate fine obstacles.
    ✔️ Updates:
    Replaces old quadtree nodes with fresh sensor scans.
    Ensures smooth real-time motion.

🚦 Full State Machine Breakdown

1️⃣ Startup State: Initialize global hash map and empty quadtree.
2️⃣ Global Mapping Mode (if in a new area):

    Fetch old terrain data from the hash map.
    Merge new sensor data (e.g., height, obstacles).
    Update the hash table with new cost values.
    
3️⃣ Local Mapping Mode (if within RealSense range):
    Clear old quadtree data.
    Fill quadtree with new 10m scan.
    Subdivide areas with obstacles.
    
4️⃣ Path Planning Mode:
    If far target → Use A on the hash map*.
    If near target → Use A inside quadtree*.
    If unexpected obstacle → Replan with quadtree updates.
    
5️⃣ Loop back to Global Mapping when moving outside 10m.


⏳ Computational Cost Analysis
🔹 Memory Usage

    Hash Map: Low memory (only stores (x, y) keys, not the full grid).
    Quadtree: Efficient for storing fine details but resets frequently.

🔹 Time Complexity
Algorithm	Time Complexity	Notes
A on Hash Map*	O(V log V)	Runs only on global terrain (efficient).
A on Quadtree*	O(V log V)	Runs on small 10m map (fast local updates).
Quadtree Insertion	O(log N)	Inserts obstacles dynamically.
🚀 Overall Performance

✅ Hybrid is faster than full quadtree (only local map updates).
✅ Avoids slow RRT calculations*.
✅ Memory-efficient global storage.
🏆 Final Verdict: Best for URC?

Yes! Hybrid Hash Map (Global) + Quadtree (Local) = Best of Both Worlds.

    Faster than full quadtree.
    More adaptive than just a hash map.
    Efficient real-time updates.



